version: '3'

networks:
  nn:
    ipam:
      driver: default
      config:
        - subnet: "192.168.5.0/24"

services:
  db:
    image: postgres
    hostname: postgres
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - 5432
    networks:
      nn:
        ipv4_address: "192.168.5.5"
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    hostname: rabbit
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./conf:/etc/rabbitmq
    privileged: true
    ports:
      - 15672:15672
      - 5672:5672
      - 22:22
    expose:
      - 5672
    networks:
      nn:
        ipv4_address: "192.168.5.4"

  redis:
    image: "redis:alpine"

    command: redis-server

    ports:
      - "6379:6379"

    volumes:
      - ./redis-data:/var/lib/redis
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      nn:
        ipv4_address: "192.168.5.3"

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - MEMCACHE_USER=MEMCACHE
      - MEMCACHE_PASSWORD=MEMCACHE


    depends_on:
      - db
    networks:
      nn:
        ipv4_address: "192.168.5.2"

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A  celery_tasks.sms.tasks worker -l info
    volumes:
      - ./celery:/app
    depends_on:
      - rabbitmq
    networks:
      nn:
        ipv4_address: "192.168.5.6"

  memcached:
    image: memcached
    container_name: memcached-service
    environment:
      - MEMCACHE_USER=MEMCACHE
      - MEMCACHE_PASSWORD=MEMCACHE

    ports:
      - "11211:11211"
    depends_on:
      - web
    networks:
      nn:
        ipv4_address: "192.168.5.7"


  minio:
    image: minio/minio
    hostname: "minio"
    expose:
      - 9000   # api 端口
      - 9001   # 控制台端口
    environment:
      MINIO_ACCESS_KEY: admin    #管理后台用户名
      MINIO_SECRET_KEY: admin123 #管理后台密码，最小8个字符
    volumes:
      - ./minio:/data               #映射当前目录下的data目录至容器内/data目录
      - ./minio/config:/root/.minio/     #映射配置目录
    command: server --console-address ':9001' /data  #指定容器中的目录 /data
    privileged: true
    restart: always
    networks:
      nn:
        ipv4_address: "192.168.5.8"


  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    hostname: nginx
    ports:
      - "80:80"
    depends_on:
      - minio
    networks:
      nn:
        ipv4_address: "192.168.5.9"





